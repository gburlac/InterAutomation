As I promised here is a new task for you on JUnit Jupiter:
1.	Add Maven support to your project
2.	Add JUnit Jupiter and Hamcrest(2.x) to your project
3.	Implement following methods:
a. public double multiply(double firstNumber, double secondNumber) – where numbers could not be smaller than 0 and bigger then 100(0=> ? <= 100), if conditions are not matched return 0
b. public int subtract(int firstNumber, int secondNumber) – where both numbers could not be smaller than 0 and firstNumber could not be smaller than secondNumber, if conditions are not matched return -1
c. public double divide(double numberToBeDivided, double divisor) – where numbers could not be smaller than 0 and numberToBeDivided could not be smaller than divisor, if conditions are not matched return 0
4.	Please cover all methods described before with unit tests using JUnit Jupiter and Hamcrest
a.	Happy path tests (values are in accepted value range and matches given conditions)
b.	Negative tests(values are outside of given range or doesn’t match to given conditions)
c.	Other cases(divide by 0)
5.	Task will be considered as done only if:
a.	All 3 given methods will be covered with one happy Parameterized test and at least one negative Test
b.	You have at least one usage of assertThat with matcher, you could use Matcher’s assertThat or you can write a wrapper for Matcher’s assertThat(optional task, ask me for additional details)
c.	You have at least two different argument sources for your Parameterized tests(Method source, Enum source, CSV source, Value source,…)
d.	You have at least one usage of assertThrows


Selenium task:
Log in, add to cart, check product is in cart
Log in, Add to cart, remove from cart, check cart empty
Log in, Add multiple, remove one, check removed

Exeption task:
-Define a method which divides two numbers. Call it with zeroes(put as parameter zero “0”).
Re-write method with handling exception (which kind is it?)
- Using  Class.forName() method, try to create object of non-existing class. Write two methods:
one of which handles exception in his body and one that throws exception further (which kind is it?)
- Define method, which throws an AssertionError (compare two strings using assert).
Rewrite this method handling this error. Print out these strings after asserting them.
- Define your own exception, override method getMessage() with your own message.
Define other class and method which throws your custom exception.
Rewrite this method, defining root cause (for example, NullPointerException) for thrown exception.
Call .printStackTrace() method and compare what you have in console and what this method returns.

Keep in mind, Junit has mechanism that help you to ensure that method you call (or actions you make) throws an exception.

DO NOT hesitate to use google to find solutions (knowledge you have gained during presentations is not complete).

